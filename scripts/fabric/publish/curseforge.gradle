// import utility functions
apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/utilities.gradle"
apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle"

//configure the plugin
curseforge {
    if (project.getProjectProperty("curse_key") != null) {
        apiKey = project.getProjectProperty("curse_key")
    }

    if (project.hasProperty("curseforge_id")) {
        project {
            id = findProperty("curseforge_id")
            mainArtifact(jar) {
                def fileDisplayName = project.getProjectProperty("display_name") ?: project.archivesBaseName
                fileDisplayName += " v" + project.version
                if(project.getProjectProperty("minecraft_version") != null) fileDisplayName += " MC" + project.getProjectProperty("minecraft_version")
                displayName = fileDisplayName
            }
            releaseType = project.release_type

            //TODO remove when MC 1.14 releases
            //usually automatically determined by the CurseGradle plugin
            addGameVersion '1.14-Snapshot'

            changelogType = "markdown"
            changelog = project.getChangelogText()

            def curseRelations = project.getProjectProperty("curseRelations")
            if(curseRelations != null) {
                relations = curseRelations
            }

            if(project.tasks.findByName('javadocJar')) {
                addArtifact project.tasks.findByName('javadocJar')
            }

            if(project.tasks.findByName('sourcesJar')) {
                addArtifact project.tasks.findByName('javadocJar')
            }
            
            if(project.tasks.findByName('apiJar')) {
                addArtifact project.tasks.findByName('javadocJar')
            }
        }
        options {
            forgeGradleIntegration = false
        }

    }
}

afterEvaluate {
    //make curseforge task(s) depend on build
    def remapTasks = project.tasks.collect { rTask -> rTask.name.startsWith("remap") }
    project.tasks.collect { t -> t.name.startsWith("curseforge")}.each { cfTask ->
        println("adding remap dependencies for task " + it.name)
        remapTasks.each { task ->
            cfTask.dependsOn task
        }
    }
}
